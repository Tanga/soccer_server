class <%= hexagon_name.camelize %>
  module Domain
    module <%= name.camelize %>
      module UseCases
        class Create<%= head_name.camelize %>
          attr_accessor :args, :id

          def initialize(args:, repository:, validators: [Validator.new])
            @args       = args
            @repository = repository
            @validators = validators
          end

          def call(use_case=nil)
            validate
            create
            self
          end

          def errors
            @errors = validators.flat_map { |validator| validator.errors }
          end

          private

          attr_accessor :repository, :validators, :args

          def validate
            validators.each do |validator|
              validator.call(self)
            end
          end

          def create
            return unless errors.empty?
            @id = repository.create(name: args[:name])
          end
        end
      end
    end
  end
end
